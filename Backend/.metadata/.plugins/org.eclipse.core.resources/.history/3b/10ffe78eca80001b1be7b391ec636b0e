package com.wipro.service;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wipro.entity.User;
import com.wipro.model.UserModel;
import com.wipro.repository.ContentRepository;
import com.wipro.repository.UserRepository;

import java.util.ArrayList;
import java.util.List;

@Service
public class UserService {

	private UserRepository userRepository;
	private ContentRepository contentRepository;

	public UserService(UserRepository userRepository, ContentRepository contentRepository) {
		this.userRepository = userRepository;
		this.contentRepository = contentRepository;
	}

	/** Create a new User */
	public ResponseEntity<Object> createUser(User model) {

		userRepository.save(model);
		return ResponseEntity.ok("User Created Successfully");

	}

	/** Update an Existing User */
	@Transactional
	public ResponseEntity<Object> updateUser(User user, Long id) {
		if (userRepository.findById(id).isPresent()) {
			User newUser = userRepository.findById(id).get();
			newUser.setFirstName(user.getFirstName());
			newUser.setLastName(user.getLastName());
			newUser.setMobile(user.getMobile());
			newUser.setEmail(user.getEmail());
			newUser.setContents(user.getContents());
			User savedUser = userRepository.save(newUser);
			if (userRepository.findById(savedUser.getId()).isPresent())
				return ResponseEntity.accepted().body("User updated successfully");
			else
				return ResponseEntity.unprocessableEntity().body("Failed updating the user specified");
		} else
			return ResponseEntity.unprocessableEntity().body("Cannot find the user specified");
	}

	/** Delete an User */
	public ResponseEntity<Object> deleteUser(Long id) {
		if (userRepository.findById(id).isPresent()) {
			userRepository.deleteById(id);
			if (userRepository.findById(id).isPresent())
				return ResponseEntity.unprocessableEntity().body("Failed to Delete the specified User");
			else
				return ResponseEntity.ok().body("Successfully deleted the specified user");
		} else
			return ResponseEntity.badRequest().body("Cannot find the user specified");
	}

	public UserModel getUser(Long id) {
		if (userRepository.findById(id).isPresent()) {
			User user = userRepository.findById(id).get();
			UserModel userModel = new UserModel();
			userModel.setFirstName(user.getFirstName());
			userModel.setLastName(user.getLastName());
			userModel.setEmail(user.getEmail());
			userModel.setMobile(user.getMobile());
			userModel.setContents(getContentList(user));
			return userModel;
		} else
			return null;
	}

	public List<UserModel> getUsers() {
		List<User> userList = userRepository.findAll();
		if (userList.size() > 0) {
			List<UserModel> userModels = new ArrayList<>();
			for (User user : userList) {
				UserModel model = new UserModel();
				model.setFirstName(user.getFirstName());
				model.setLastName(user.getLastName());
				model.setMobile(user.getMobile());
				model.setEmail(user.getEmail());
				model.setContents(getContentList(user));
				userModels.add(model);
			}
			return userModels;
		} else
			return new ArrayList<UserModel>();
	}

	private List<ContentModel> getContentList(User user) {
		List<ContentModel> contentList = new ArrayList<>();
		for (int i = 0; i < user.getContents().size(); i++) {
			ContentModel contentModel = new ContentModel();
			contentModel.setName(user.getContents().get(i).getName());
			contentModel.setDescription(user.getContents().get(i).getDescription());
			contentList.add(contentModel);
		}
		return contentList;
	}
}